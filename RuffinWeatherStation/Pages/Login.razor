@page "/login"
@using RuffinWeatherStation.Services
@using System.ComponentModel.DataAnnotations
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" @bind-Value="loginModel.Username" class="form-control" placeholder="Enter username" />
                            <ValidationMessage For="@(() => loginModel.Username)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Enter password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Loading...</span>
                                }
                                else
                                {
                                    <span>Login</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-muted">
                    <small>Use admin credentials to access weather notes</small>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // If user is already authenticated, redirect to notes page
        if (await AuthService.IsAuthenticatedAsync())
        {
            NavigationManager.NavigateTo("/notes");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.Login(loginModel.Username, loginModel.Password);

            if (result)
            {
                // Redirect to notes page after successful login
                NavigationManager.NavigateTo("/notes");
            }
            else
            {
                errorMessage = "Invalid username or password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }

        isLoading = false;
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}