@page "/apitest"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Text.Json

<PageTitle>API Connection Test</PageTitle>

<h1>API Connection Test</h1>

<div class="card mb-4">
    <div class="card-header">
        <h3>API Connectivity Diagnostics</h3>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <p>Test your API connection by clicking the buttons below:</p>
            <button class="btn btn-primary me-2" @onclick="TestHealthEndpoint">Test Health Endpoint</button>
            <button class="btn btn-success me-2" @onclick="TestWeatherEndpoint">Test Weather API</button>
            <button class="btn btn-warning me-2" @onclick="TestWithFetch">Test with JavaScript Fetch</button>
            <button class="btn btn-info" @onclick="ClearResults">Clear Results</button>
        </div>

        <div class="mb-3">
            <label class="form-label">API Base URL:</label>
            <input class="form-control" @bind="ApiBaseUrl" @bind:event="oninput" />
            <small class="form-text text-muted">Current HttpClient BaseAddress: @Http.BaseAddress</small>
        </div>

        @if (_loading)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (_error != null)
        {
            <div class="alert alert-danger">
                <h4>Error:</h4>
                <p style="white-space: pre-wrap;">@_error</p>
            </div>
        }
        else if (_data != null)
        {
            <div class="alert alert-success">
                <h4>Success! Received data:</h4>
                <pre style="white-space: pre-wrap; word-break: break-all;">@_data</pre>
            </div>
        }
    </div>
</div>

<div class="card mb-4">
    <div class="card-header">
        <h3>Request Details</h3>
    </div>
    <div class="card-body">
        <dl>
            <dt>Request URL</dt>
            <dd>@_requestUrl</dd>
            
            <dt>Request Method</dt>
            <dd>@_requestMethod</dd>
            
            <dt>Response Status</dt>
            <dd>@_responseStatus</dd>
            
            <dt>Response Time</dt>
            <dd>@_responseTime ms</dd>
        </dl>
    </div>
</div>

<div class="card mb-4">
    <div class="card-header">
        <h3>CORS Diagnostics</h3>
    </div>
    <div class="card-body">
        <p>Common CORS-related errors:</p>
        <ul>
            <li><strong>Failed to fetch</strong> - Often indicates a CORS issue or network connectivity problem</li>
            <li><strong>Access to fetch has been blocked by CORS policy</strong> - Server isn't including proper CORS headers</li>
            <li><strong>No 'Access-Control-Allow-Origin' header</strong> - API is missing critical CORS headers</li>
        </ul>
        
        <div class="alert alert-warning mt-3">
            <strong>Current domain: </strong> <span id="currentDomain"></span><br/>
            <strong>Origin header value: </strong> <span id="originHeader"></span>
        </div>
        
        <button class="btn btn-secondary" @onclick="ShowBrowserConsole">Show Browser Console Instructions</button>
        
        @if (_showConsoleInstructions)
        {
            <div class="alert alert-info mt-3">
                <h5>How to Check Browser Console:</h5>
                <ol>
                    <li>Press <strong>F12</strong> or right-click â†’ Inspect</li>
                    <li>Go to the <strong>Console</strong> tab</li>
                    <li>Look for red error messages related to CORS or fetch</li>
                    <li>If you see <strong>"Failed to fetch"</strong> or <strong>"has been blocked by CORS policy"</strong>, your API isn't properly configured for CORS</li>
                </ol>
            </div>
        }
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3>Troubleshooting Tips</h3>
    </div>
    <div class="card-body">
        <h5>Common Issues:</h5>
        <ul>
            <li>
                <strong>CORS Errors</strong> - Make sure your API's CORS policy includes your Blazor app's domain.
                <ul>
                    <li>Check that <code>WithOrigins()</code> in your API includes: <span id="currentUrl"></span></li>
                    <li>Restart your API service after updating CORS settings</li>
                </ul>
            </li>
            <li>
                <strong>API Not Found</strong> - Verify the API URL is correct and the service is running.
                <ul>
                    <li>Try accessing the API URL directly in a browser tab</li>
                    <li>Check if <code>/health</code> endpoint responds</li>
                </ul>
            </li>
            <li>
                <strong>Network Issues</strong> - Check if you can access the API directly in a browser.
            </li>
        </ul>
    </div>
</div>

@code {
    private string _data;
    private string _error;
    private bool _loading;
    private string _requestUrl = "";
    private string _requestMethod = "";
    private string _responseStatus = "";
    private long _responseTime = 0;
    private string ApiBaseUrl = "";
    private bool _showConsoleInstructions = false;

    protected override async Task OnInitializedAsync()
    {
        ApiBaseUrl = Http.BaseAddress?.ToString() ?? "";
        await UpdateDomainInfo();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateDomainInfo();
        }
    }

    private async Task UpdateDomainInfo()
    {
        await JSRuntime.InvokeVoidAsync("eval", @"
            document.getElementById('currentDomain').textContent = window.location.origin;
            document.getElementById('originHeader').textContent = window.location.origin;
            document.getElementById('currentUrl').textContent = window.location.origin;
        ");
    }

    private void ShowBrowserConsole()
    {
        _showConsoleInstructions = !_showConsoleInstructions;
    }

    private async Task TestHealthEndpoint()
    {
        await TestEndpoint("health", "GET");
    }

    private async Task TestWeatherEndpoint()
    {
        await TestEndpoint("api/weather/recent?count=1", "GET");
    }

    private async Task TestWithFetch()
    {
        _loading = true;
        _error = null;
        _data = null;

        try
        {
            var baseUrl = string.IsNullOrEmpty(ApiBaseUrl) ? Http.BaseAddress?.ToString() : ApiBaseUrl;
            var endpoint = "health";
            _requestUrl = $"{baseUrl.TrimEnd('/')}/{endpoint}";
            _requestMethod = "GET (JS Fetch)";

            var result = await JSRuntime.InvokeAsync<string>("eval", $@"
                (async () => {{
                    try {{
                        console.log('Fetching {_requestUrl} via JavaScript');
                        const startTime = performance.now();
                        const response = await fetch('{_requestUrl}', {{
                            method: 'GET',
                            headers: {{
                                'Accept': 'application/json',
                                'X-Requested-With': 'Fetch'
                            }},
                            mode: 'cors',
                            cache: 'no-store'
                        }});
                        const endTime = performance.now();
                        
                        const responseTime = Math.round(endTime - startTime);
                        const responseData = {{
                            status: response.status + ' ' + response.statusText,
                            time: responseTime,
                            body: await response.text(),
                            ok: response.ok
                        }};
                        
                        return JSON.stringify(responseData);
                    }} catch (error) {{
                        console.error('Fetch error:', error);
                        return JSON.stringify({{
                            error: true,
                            message: error.toString()
                        }});
                    }}
                }})();
            ");

            var resultObj = JsonSerializer.Deserialize<JsonElement>(result);
            
            if (resultObj.TryGetProperty("error", out var isError) && isError.GetBoolean())
            {
                _error = resultObj.GetProperty("message").GetString();
            }
            else
            {
                _responseStatus = resultObj.GetProperty("status").GetString();
                _responseTime = resultObj.GetProperty("time").GetInt64();
                
                var body = resultObj.GetProperty("body").GetString();
                try {
                    var jsonDoc = JsonDocument.Parse(body);
                    _data = JsonSerializer.Serialize(jsonDoc, new JsonSerializerOptions { WriteIndented = true });
                }
                catch {
                    _data = body;
                }
            }
        }
        catch (Exception ex)
        {
            _error = $"Exception: {ex.Message}\n" +
                     $"Stack trace: {ex.StackTrace}";
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task TestEndpoint(string endpoint, string method)
    {
        _loading = true;
        _error = null;
        _data = null;
        _requestUrl = "";
        _requestMethod = "";
        _responseStatus = "";
        _responseTime = 0;

        try
        {
            // Update HttpClient BaseAddress if changed
            if (!string.IsNullOrEmpty(ApiBaseUrl) && 
                Http.BaseAddress?.ToString() != ApiBaseUrl)
            {
                Http.BaseAddress = new Uri(ApiBaseUrl);
            }

            var url = endpoint;
            _requestUrl = new Uri(Http.BaseAddress, url).ToString();
            _requestMethod = method;

            var sw = System.Diagnostics.Stopwatch.StartNew();
            
            HttpResponseMessage response;
            if (method == "GET")
            {
                var request = new HttpRequestMessage(HttpMethod.Get, url);
                request.Headers.Add("X-Requested-With", "HttpClient");
                response = await Http.SendAsync(request);
            }
            else
            {
                // Add other methods as needed
                throw new NotImplementedException($"Method {method} not implemented");
            }

            sw.Stop();
            _responseTime = sw.ElapsedMilliseconds;
            _responseStatus = $"{(int)response.StatusCode} {response.StatusCode}";

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                
                // Try to format as JSON if possible
                try
                {
                    var jsonDoc = JsonDocument.Parse(content);
                    _data = JsonSerializer.Serialize(
                        jsonDoc,
                        new JsonSerializerOptions { WriteIndented = true }
                    );
                }
                catch
                {
                    // If not valid JSON, show as plain text
                    _data = content;
                }
            }
            else
            {
                _error = $"API returned status code: {response.StatusCode}\n" +
                         $"Response: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            _error = $"Exception: {ex.Message}\n" +
                     $"Stack trace: {ex.StackTrace}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ClearResults()
    {
        _data = null;
        _error = null;
        _requestUrl = "";
        _requestMethod = "";
        _responseStatus = "";
        _responseTime = 0;
    }
}